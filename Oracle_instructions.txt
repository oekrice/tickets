Setup instructions for Oracle VM, using nginx for HTTPS and certificates and things
Necessary files should be kept and maintained in the git repo (for certificates etc.)

#Download SSH certificates during instance creation.
#Public IP lives under the 'instances' heading

#SSH in to machine
ssh -I $(private key name) opc@$(Public IP address)

#Install docker
#------------------------------------------

#Install dnf utilities (slow one)
RUN: sudo dnf install -y dnf-utils device-mapper-persistent-data lvm2
#The above one is slow, and uses lots of memory

#Install and enable
RUN: sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
RUN: sudo dnf install -y docker-ce docker-ce-cli containerd.io
#The above one is VERY slow
RUN: sudo systemctl enable --now docker

#Clean up:
RUN: sudo dnf clean all
RUN: sudo rm -rf /var/cache/dnf


#Get files from Github
#------------------------------------------
RUN: sudo dnf install -y git
RUN: git clone https://github.com/oekrice/striking.git
RUN: cd striking

#Install HTTPS things with nginx (quite quick)
sudo dnf install -y nginx
sudo systemctl enable --now nginx
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --reload


#Install certbot (this didn't work before but I'm more awake today...)
#-----------------------------------------------
sudo dnf install epel-release
sudo dnf config-manager --set-enabled ol9_developer_EPEL
sudo dnf update
sudo dnf install -y snapd
sudo systemctl enable --now snapd.socket
sudo ln -s /var/lib/snapd/snap /snap
sudo systemctl start snapd
sudo snap install --classic certbot


CHANGE DNS RECORD IN Squarespace TO POINT AT THIS IP -- don't need txt though
NAVIATE TO SECURITY RULES IN ORACLE
Add ingress rule:
Type CIDR, Source 0.0.0.0/0, TCP, Destination Port 80:443 and save
DO NOT ADD 8501 unless testing!

!All good until here
#Test and reset nginx
RUN: sudo nginx -t
RUN: sudo systemctl reload nginx  

#File should be in the GitHub (and I'll update it as appropriate), one hopes, but need to copy to the right place
sudo cp tickets_setup.conf /etc/nginx/conf.d/tickets.conf    #MAYBE, or not. Who knows?    
sudo /snap/bin/certbot --nginx -d tickets.oekrice.com -d tickets.oekrice.com
sudo /snap/bin/certbot renew --dry-run    #Just to test
Follow prompts. Should be OK... Check Brenda file is still all right

#Allow streamlit and other things through the firewall
sudo dnf install firewalld
sudo firewall-cmd --zone=public --permanent --add-port=5000/tcp 
sudo firewall-cmd --zone=public --permanent --add-port=80/tcp
sudo firewall-cmd --zone=public --permanent --add-port=443/tcp
sudo firewall-cmd --reload

RUN: sudo setsebool -P httpd_can_network_connect 1   #Allows them to talk to each other  - IMPORTANT

RUN: sudo cp brenda.conf /etc/nginx/conf.d/brenda.conf   #Copy complete Brenda conf in for SSHing
RUN: sudo cp -a oracle_root/. ../  #To be confirmed on next install (call from in Striking)

#Below here to actually run things -- may end up different!
RUN: mkdir backend/station_data
#Mount the volume so Docker can deal with it

#Actually run Brenda with docker:
RUN: sudo docker build -t tickets .
sudo docker run -p 5000:5000 --name tickets tickets
RUN: sudo docker run -v "$(pwd)/frequency_data:/striking/frequency_data" -p 8501:8501 --name brenda brenda

#Stop running Brenda
RUN: sudo docker rm -f tickets

#Test and reset nginx
sudo systemctl stop nginx
sudo systemctl disable nginx
sudo systemctl enable --now nginx
RUN: sudo nginx -t
RUN: sudo systemctl reload nginx  

#That should be all!

#New attempt::::: Running with multiple processes!
#This involves doing docker compose


#New files are all set up (I think it's fine). 
#To run:

RUN: sudo lsof -i :80 #This checks for existing processes, might be worth killing them
sudo systemctl stop nginx
sudo systemctl disable nginx
#May need:
killall -9 nginx

#To go:
RUN: cd ..
RUN: sudo COMPOSE_BAKE=true docker compose up --build #For testing
or
RUN: sudo COMPOSE_BAKE=true docker compose up -d --build #For actually having it running
#To stop all:
#Not sure, doesn't seem to work

#To set up crontab
crontab -e

#Paste:
0 3 * * * docker compose restart nginx streamlit1 streamlit2 streamlit3
0 2 * * * /home/opc/striking/backup_to_gdrive.sh

#To update from git
RUN: git pull
sudo docker compose down
sudo dnf autoremove
sudo cp -a oracle_root/. ../
sudo docker rmi -f $(sudo docker images -q)
sudo COMPOSE_BAKE=true docker compose build
sudo docker compose up -d
sudo docker image prune -f
sudo docker container prune -f
sudo dnf clean all
sudo rm -rf /var/cache/dnf

#To restart quickly and free up memory
sudo docker compose restart nginx streamlit1 streamlit2 streamlit3

#To run nginx on its own (with defaults):
sudo docker run --name my-nginx -d -p 80:80 nginx

#Google drive backups: Requires rclone and the appropriate config files. Bit of a pain to set up.
curl https://rclone.org/install.sh | sudo bash
rclone config

#To run docker on its own on Windows:
Open docker desktop for internet things
RUN: docker build -t brenda .
RUN: docker run --rm -p 8501:8501 -e STREAMLIT_SERVER_PORT=8501 brenda

